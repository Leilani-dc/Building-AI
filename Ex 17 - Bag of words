#---A D V A N C E D---

import numpy as np

data = [[1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1],
        [1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 0, 1, 3, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1]]

def manhattan_distance(a, b):
    return np.sum(np.abs(np.array(a) - np.array(b)))

def find_nearest_pair(data):
    N = len(data)
    dist = np.empty((N, N), dtype=float)
    
    # Calculate all pairwise Manhattan distances
    for i in range(N):
        for j in range(N):
            if i == j:
                dist[i, j] = np.inf  # Set diagonal elements to infinity
            else:
                dist[i, j] = manhattan_distance(data[i], data[j])
    
    # Find the index of the minimum distance
    min_index = np.unravel_index(np.argmin(dist), dist.shape)
    print(min_index)

find_nearest_pair(data)
