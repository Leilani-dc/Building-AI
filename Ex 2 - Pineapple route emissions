#---A D V A N C E D---

# Define port names and distances
portnames = ["PAN", "AMS", "CAS", "NYC", "HEL"]

# Distance matrix in kilometers
D = [
    [0, 8943, 8019, 3652, 10545],
    [8943, 0, 2619, 6317, 2078],
    [8019, 2619, 0, 5836, 4939],
    [3652, 6317, 5836, 0, 7825],
    [10545, 2078, 4939, 7825, 0]
]

# CO2 emissions per kilometer per metric ton (20 grams per km per metric ton)
co2 = 0.020

# Initialize variables to store the smallest emissions and best route
smallest = float('inf')
bestroute = []

# Recursive function to generate permutations and calculate emissions
def permutations(route, ports):
    global smallest, bestroute
    if len(ports) == 0:
        # Calculate total distance for the current route
        total_distance = 0
        for i in range(len(route) - 1):
            total_distance += D[route[i]][route[i + 1]]
        # Calculate emissions
        emissions = total_distance * co2
        # Update the smallest emissions and best route if necessary
        if emissions < smallest:
            smallest = emissions
            bestroute = route
    else:
        for i in range(len(ports)):
            permutations(route + [ports[i]], ports[:i] + ports[i + 1:])

# Main function to start the recursion and print the result
def main():
    global smallest
    # Start the recursion with the initial port (PAN) and the remaining ports
    permutations([0], list(range(1, len(portnames))))
    # Print the best route and its emissions
    print(' '.join([portnames[i] for i in bestroute]) + " %.1f kg" % smallest)

# Run the main function
main()
